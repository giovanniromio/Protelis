apply plugin: 'java'
apply from: 'eclipse.gradle'
apply from: 'codequality.gradle'
apply plugin: 'project-report'
apply from: 'maven.gradle'
apply plugin: 'build-dashboard'
apply from: 'signing.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.danilopianini:smartrrr:[0, 1['
        classpath 'me.tatarka:gradle-retrolambda:3.2.4'
    }
}
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'org.danilopianini.smartrrr'


retrolambda {
  jdk System.getenv("JAVA8_HOME")
  oldJdk System.getenv("JAVA7_HOME")
  javaVersion JavaVersion.VERSION_1_7
  defaultMethods true
}

substitutions {
	substitute 'asm:asm' up_to '+' with 'org.ow2.asm:asm' at '+'
	substitute 'com.google.guava:guava' up_to '14.0.1' with 'com.google.guava:guava-jdk5' at '+'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task wrapper(type: Wrapper) {
    gradleVersion = gradleVersionToUse
}

// General configuration

compileJava.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes 'Implementation-Title': artifactId, 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

configurations {
    doc {
        transitive false
    }
    compile {
        exclude module: 'org.eclipse.xtext.dependencies'
    }
    doclet
}

dependencies {


    compile "commons-codec:commons-codec:$commonsCodecVersion"
    compile "commons-io:commons-io:$commonsIOVersion"
    compile "org.apache.commons:commons-math3:$math3Version"
    compile "net.sf.trove4j:trove4j:$trove4jVersion"
    compile "com.google.guava:guava:$guavaVersion"
	compile "org.apache.commons:commons-lang3:$lang3Version"
    compile "org.danilopianini:javalib-java7:$javalib7Version"
    compile "org.danilopianini:javalib:$javalibVersion"
    compile "org.springframework:spring-core:$springVersion"
    compile "org.protelis:protelis.parser:$parserVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.eclipse.emf:org.eclipse.emf.mwe.core:$mweVersion"
    compile "org.eclipse.emf:org.eclipse.emf.mwe.utils:$mweVersion"
	compile "com.google.code.findbugs:findbugs:$findBugsVersion"
	compile "net.sourceforge.streamsupport:streamsupport-flow:$streamVersion"
	
    testCompile "junit:junit:$junitVersion"

    testRuntime "ch.qos.logback:logback-classic:1.1.3"
    
    doclet "org.jboss.apiviz:apiviz:$apivizVersion"
    
    pmd(
        "net.sourceforge.pmd:pmd-core:$pmdVersion",
        "net.sourceforge.pmd:pmd-vm:$pmdVersion",
        "net.sourceforge.pmd:pmd-plsql:$pmdVersion",
        "net.sourceforge.pmd:pmd-jsp:$pmdVersion",
        "net.sourceforge.pmd:pmd-xml:$pmdVersion",
        "net.sourceforge.pmd:pmd-java:$pmdVersion"
    )
}

// Javadoc Configuration

task aggregateJavadoc(type: Javadoc) {
	source configurations.doc.collect { zipTree(it) }
    source sourceSets.main.allJava
    classpath = sourceSets.main.output + sourceSets.main.compileClasspath
    include '**/*.java'
    destinationDir file("$project.buildDir/docs/javadoc/")
    failOnError = false
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
    options.showAll()
    options.addBooleanOption('nopackagediagram', true)
	options.addStringOption('Xdoclint:none', '-quiet')
    configure(options) {
        windowTitle "$projectLongName version $project.version Javadoc API"
        docTitle "$projectLongName $project.version reference API"
        links 'http://docs.oracle.com/javase/8/docs/api/'
        links 'http://trove4j.sourceforge.net/javadocs/'
        doclet 'org.jboss.apiviz.APIviz'
        docletpath file(configurations.doclet.asPath)
    }
}

// Artifacts configuration

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: aggregateJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

defaultTasks 'wrapper', 'clean', 'build', 'check', 'assemble', 'install', 'aggregateJavadoc', 'buildDashboard'

task fatJar(type: Jar) {
    baseName = project.name + '-redist'
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}
